import{r as t}from"./app-0nnjcZrn.js";let s=0;const o=new Map,e=t=>{if(o.has(t))return;const s=setTimeout(()=>{o.delete(t),r({type:"REMOVE_TOAST",toastId:t})},1e6);o.set(t,s)},a=(t,s)=>{switch(s.type){case"ADD_TOAST":return{...t,toasts:[s.toast,...t.toasts].slice(0,1)};case"UPDATE_TOAST":return{...t,toasts:t.toasts.map(t=>t.id===s.toast.id?{...t,...s.toast}:t)};case"DISMISS_TOAST":{const{toastId:o}=s;return o?e(o):t.toasts.forEach(t=>{e(t.id)}),{...t,toasts:t.toasts.map(t=>t.id===o||void 0===o?{...t,open:!1}:t)}}case"REMOVE_TOAST":return void 0===s.toastId?{...t,toasts:[]}:{...t,toasts:t.toasts.filter(t=>t.id!==s.toastId)}}},n=[];let i={toasts:[]};function r(t){i=a(i,t),n.forEach(t=>{t(i)})}function T({...t}){const o=(s=(s+1)%Number.MAX_SAFE_INTEGER,s.toString()),e=()=>r({type:"DISMISS_TOAST",toastId:o});return r({type:"ADD_TOAST",toast:{...t,id:o,open:!0,onOpenChange:t=>{t||e()}}}),{id:o,dismiss:e,update:t=>r({type:"UPDATE_TOAST",toast:{...t,id:o}})}}function d(){const[s,o]=t.useState(i);return t.useEffect(()=>(n.push(o),()=>{const t=n.indexOf(o);t>-1&&n.splice(t,1)}),[s]),{...s,toast:T,dismiss:t=>r({type:"DISMISS_TOAST",toastId:t})}}export{T as t,d as u};
